/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

//取链表尾元素
int NodeTail(struct ListNode** node)
{
    assert(*node);
    if(!(*node)->next)
    {
        int val=(*node)->val;
        free(*node);
        *node=NULL;
        return val;
    }
    else
    {
        struct ListNode* next=(*node);
        while(next->next->next)
        {
            next=next->next;
        }
        int val=next->next->val;
        free(next->next);
        next->next=NULL;
        return val;
    }
    
}

//将尾元素尾插到新链表中
void NodeInsert2(struct ListNode** node, int val)
{
	//新建结点
	struct ListNode* newnode = (struct ListNode*)malloc(sizeof(struct ListNode));
	newnode->val = val;
	newnode->next = NULL;

	//链表为空
	if (!(*node))
	{
		(*node) = newnode;
	}
	else
	{
		//找到尾结点
		struct ListNode* next = (*node);
		while (next->next)
		{
			next = next->next;
		}
		newnode->next = next->next;
		next->next = newnode;
	}
}

struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode* newnode=NULL;
    while(head)
    {
        int val=NodeTail(&head);
        NodeInsert2(&newnode,val);
    }
    return newnode;
}
